datasource db {
  provider = "postgresql"
  url      = "postgresql://user:password@postgres:5432/dashline?schema=public"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model drivers {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  vehicle     String
  value       Float
  minKm       Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.Timestamp(6)

  review      reviews? @relation("DriverReview")
  rides       rides[]  @relation("DriverRides")  // Adiciona a relação com as corridas
}

model reviews {
  id         String    @id @default(uuid())
  driver     drivers   @relation("DriverReview", fields: [driverId], references: [id])
  driverId   Int       @unique
  rating     Int
  comment    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
}

model customers {
  id         String    @id @default(uuid())
  name       String?
  rides      rides[]   @relation("CustomerRides")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
}

model rides {
  id          String     @id @default(uuid())
  customer    customers? @relation("CustomerRides", fields: [customerId], references: [id])
  customerId  String
  ride_id     Int        @default(autoincrement())
  date        DateTime
  origin      String
  destination String
  distance    Int
  duration    String
  value       Float
  driver      drivers    @relation("DriverRides", fields: [driverId], references: [id])  // Relacionamento com o driver
  driverId    Int        // Adiciona o campo driverId como chave estrangeira
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?  @db.Timestamp(6)
}